USE [master]
GO

/*Create database*/
IF NOT EXISTS (SELECT * FROM master.dbo.sysdatabases WHERE '[' + name + ']' = 'HRAS_RAD' OR name = 'HRAS_RAD')
   exec('CREATE DATABASE [HRAS_RAD] CONTAINMENT = NONE')
GO

begin
EXEC [HRAS_RAD].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
/* COMMENT OUT BELOW IF USER CREATION PERMISSION IS NOT GRANTED */

/* create User If possible */
--create a login
USE [master];

--CREATE LOGIN teamRADGSHAUser
IF NOT EXISTS (SELECT name FROM master.sys.server_principals WHERE name = 'teamRADGSHAUser')
   exec('CREATE LOGIN teamRADGSHAUser WITH PASSWORD    = ''123'';')
GO

USE [HRAS_RAD]

--create user
IF USER_ID('teamRADGSHAUser') IS NULL CREATE USER [teamRADGSHAUser] FOR LOGIN [teamRADGSHAUser]
GO

--update roles
EXEC sys.sp_addrolemember
	@rolename = 'db_datareader',
	@membername = 'teamRADGSHAUser'
EXEC sys.sp_addrolemember
	@rolename = 'db_datawriter',
	@membername = 'teamRADGSHAUser'
EXEC sys.sp_addrolemember
	@rolename = 'db_owner',
	@membername = 'teamRADGSHAUser'
GO
/* COMMENT OUT ABOVE IF USER CREATION PERMISSION IS NOT GRANTED */

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Inventory')
--create table
CREATE TABLE [dbo].[Inventory]
(
	[StockId] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](300) NULL,
	[Cost] [money] NULL,
	CONSTRAINT [PK_Inventory] PRIMARY KEY CLUSTERED 
	(
		[StockId] ASC
	)
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Item')
--create table
CREATE TABLE [dbo].[Item]
(
	[StockId] [nvarchar](50) NOT NULL,
	[Size] [int] NULL,
	[Quantity] [int] NULL,
	CONSTRAINT [PK_Item] PRIMARY KEY CLUSTERED 
	(
		[StockId] ASC
	)
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Log')
--create table
CREATE TABLE [dbo].[Log](
	[StockId] [nvarchar](50) NOT NULL,
	[UserName] [nvarchar](50) NOT NULL,
	[Date] [datetime] NOT NULL,
	[QuantityUsed] [int] NULL,
 CONSTRAINT [PK_Log] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC,
	[UserName] ASC,
	[Date] ASC
) 
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Patient')
--create table
CREATE TABLE [dbo].[Patient](
	[Gender] [nvarchar](1) NULL,
	[SSN] [nvarchar](9) NOT NULL,
	[BirthDate] [datetime] NULL,
	[FirstName] [nvarchar](50) NULL,
	[MiddleInitial] [nvarchar](1) NULL,
	[LastName] [nvarchar](50) NULL,
	[AddressLine1] [nvarchar](50) NULL,
	[AddressLine2] [nvarchar](50) NULL,
	[State] [nvarchar](2) NULL,
	[City] [nvarchar](50) NULL,
	[Zipcode] [nchar](10) NULL,
	[InsurerId] [nvarchar](50) NULL,
	[DoNotResuscitate] [bit] NULL,
	[OrganDonor] [bit] NULL,
 CONSTRAINT [PK_Patient] PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
) 
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Room')
--create table
CREATE TABLE [dbo].[Room](
	[HourlyRate] [decimal](5, 2) NULL,
	[EffectiveDate] [datetime] NOT NULL,
	[RoomNumber] [nvarchar](10) NOT NULL,
 CONSTRAINT [PK_Room_1] PRIMARY KEY CLUSTERED 
(
	[EffectiveDate] ASC,
	[RoomNumber] ASC
) 
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Service')
--create table
CREATE TABLE [dbo].[Service](
	[StockId] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_Service] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC
) 
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'StaysIn')
--create table
CREATE TABLE [dbo].[StaysIn](
	[RoomNumber] [nvarchar](10) NOT NULL,
	[RoomEffectiveDate] [datetime] NOT NULL,
	[PatientId] [nvarchar](9) NOT NULL,
	[VisitEntryDate] [datetime] NOT NULL,
	[RoomEntryDateTime] [datetime] NULL,
	[RoomExitDateTime] [datetime] NULL,
 CONSTRAINT [PK_StaysIn] PRIMARY KEY CLUSTERED 
(
	[RoomNumber] ASC,
	[RoomEffectiveDate] ASC,
	[PatientId] ASC,
	[VisitEntryDate] ASC
) 
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Symptom')
--create table
CREATE TABLE [dbo].[Symptom](
	[PatientId] [nvarchar](9) NOT NULL,
	[EntryDate] [datetime] NOT NULL,
	[SymptomName] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_Symptom] PRIMARY KEY CLUSTERED 
(
	[PatientId] ASC,
	[EntryDate] ASC,
	[SymptomName] ASC
) 
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'User')
--create table
CREATE TABLE [dbo].[User](
	[Username] [nvarchar](50) NOT NULL,
	[Password] [varchar](64) NOT NULL,
	[UserType] [bit] NOT NULL,
 CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED 
(
	[Username] ASC
) 
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Uses')
--create table
CREATE TABLE [dbo].[Uses](
	[StockId] [nvarchar](50) NOT NULL,
	[PatientId] [nvarchar](9) NOT NULL,
	[EntryDateTime] [datetime] NOT NULL,
	[QuantityUsed] [int] NULL,
 CONSTRAINT [PK_Uses] PRIMARY KEY CLUSTERED 
(
	[StockId] ASC,
	[PatientId] ASC,
	[EntryDateTime] ASC
) 
) ON [PRIMARY]
GO

--check if table exists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Visit')
--create table
CREATE TABLE [dbo].[Visit](
	[PatientId] [nvarchar](9) NOT NULL,
	[EntryDate] [datetime] NOT NULL,
	[ExitDate] [datetime] NULL,
	[AttendingPhysician] [nvarchar](50) NULL,
	[Diagnosis] [nvarchar](50) NULL,
	[Note] [nvarchar](100) NULL,
 CONSTRAINT [PK_Visit] PRIMARY KEY CLUSTERED 
(
	[PatientId] ASC,
	[EntryDate] ASC
) 
) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_Item_Inventory')
ALTER TABLE [dbo].[Item]  WITH CHECK ADD  CONSTRAINT [FK_Item_Inventory] FOREIGN KEY([StockId])
REFERENCES [dbo].[Inventory] ([StockId])
GO
ALTER TABLE [dbo].[Item] CHECK CONSTRAINT [FK_Item_Inventory]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_Log_Inventory')
ALTER TABLE [dbo].[Log]  WITH CHECK ADD  CONSTRAINT [FK_Log_Inventory] FOREIGN KEY([StockId])
REFERENCES [dbo].[Inventory] ([StockId])
GO
ALTER TABLE [dbo].[Log] CHECK CONSTRAINT [FK_Log_Inventory]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_Log_User')
ALTER TABLE [dbo].[Log]  WITH CHECK ADD  CONSTRAINT [FK_Log_User] FOREIGN KEY([UserName])
REFERENCES [dbo].[User] ([Username])
GO
ALTER TABLE [dbo].[Log] CHECK CONSTRAINT [FK_Log_User]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_Service_Inventory')
ALTER TABLE [dbo].[Service]  WITH CHECK ADD  CONSTRAINT [FK_Service_Inventory] FOREIGN KEY([StockId])
REFERENCES [dbo].[Inventory] ([StockId])
GO
ALTER TABLE [dbo].[Service] CHECK CONSTRAINT [FK_Service_Inventory]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_StaysIn_Patient')
ALTER TABLE [dbo].[StaysIn]  WITH CHECK ADD  CONSTRAINT [FK_StaysIn_Patient] FOREIGN KEY([PatientId])
REFERENCES [dbo].[Patient] ([SSN])
GO
ALTER TABLE [dbo].[StaysIn] CHECK CONSTRAINT [FK_StaysIn_Patient]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_StaysIn_Room')
ALTER TABLE [dbo].[StaysIn]  WITH CHECK ADD  CONSTRAINT [FK_StaysIn_Room] FOREIGN KEY([RoomEffectiveDate], [RoomNumber])
REFERENCES [dbo].[Room] ([EffectiveDate], [RoomNumber])
GO
ALTER TABLE [dbo].[StaysIn] CHECK CONSTRAINT [FK_StaysIn_Room]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_Symptom_Visit')
ALTER TABLE [dbo].[Symptom]  WITH CHECK ADD  CONSTRAINT [FK_Symptom_Visit] FOREIGN KEY([PatientId], [EntryDate])
REFERENCES [dbo].[Visit] ([PatientId], [EntryDate])
GO
ALTER TABLE [dbo].[Symptom] CHECK CONSTRAINT [FK_Symptom_Visit]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_Uses_Inventory')
ALTER TABLE [dbo].[Uses]  WITH CHECK ADD  CONSTRAINT [FK_Uses_Inventory] FOREIGN KEY([StockId])
REFERENCES [dbo].[Inventory] ([StockId])
GO
ALTER TABLE [dbo].[Uses] CHECK CONSTRAINT [FK_Uses_Inventory]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_Uses_Visit')
ALTER TABLE [dbo].[Uses]  WITH CHECK ADD  CONSTRAINT [FK_Uses_Visit] FOREIGN KEY([PatientId], [EntryDateTime])
REFERENCES [dbo].[Visit] ([PatientId], [EntryDate])
GO
ALTER TABLE [dbo].[Uses] CHECK CONSTRAINT [FK_Uses_Visit]
GO
USE [master]
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_Patient_Visit')
ALTER TABLE [dbo].[Visit]  WITH CHECK ADD  CONSTRAINT [FK_Patient_Visit] FOREIGN KEY([PatientId])
REFERENCES [dbo].[Patient] ([SSN])
GO
ALTER TABLE [dbo].[Visit] CHECK CONSTRAINT [FK_Patient_Visit]
GO
ALTER DATABASE [HRAS_RAD] SET  READ_WRITE 
GO


USE [HRAS_RAD]
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/28/2019
-- Description:	takes variables and inserts them into the Patient table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addPatient]'))
   exec('CREATE PROCEDURE [dbo].[addPatient] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addPatient

	-- Add the parameters for the stored procedure here
	@gender nvarchar(1), @ssn nvarchar(50), 
	@birthDate datetime, @firstName nvarchar(50), 
	@middleInitial nvarchar(1), @lastName nvarchar(50), 
	@addressLine1 nvarchar(50), @addressLine2 nvarchar(50), 
	@state nvarchar(2), @city nvarchar(50), 
	@zipcode nchar(10), @insurerId nvarchar(50), 
	@doNotResuscitate bit, @organDonor bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO Patient (Gender, SSN, BirthDate, FirstName, MiddleInitial, LastName, AddressLine1, 
	AddressLine2, State, City, Zipcode, InsurerId, DoNotResuscitate, OrganDonor) VALUES (@gender, @ssn, 
	@birthDate, @firstName,
	@middleInitial, @lastName,
	@addressLine1, @addressLine2,
	@state, @city,
	@zipcode, @insurerId,
	@doNotResuscitate, @organDonor)

END
GO
-- =============================================
-- Author:		Matt
-- Create date: 3/28/2019
-- Description:	takes 3 variables and stores them into the Room table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addRoom]'))
   exec('CREATE PROCEDURE [dbo].[addRoom] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addRoom
	-- Add the parameters for the stored procedure here
	@hourlyRate decimal(5,2), @effectiveDate datetime,
	@roomNumber nvarchar(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO Room (HourlyRate, EffectiveDate, RoomNumber) VALUES (@hourlyRate, @effectiveDate, @roomNumber)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/28/2019
-- Description:	takes a ssn variable and returns patients where SSN matches
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[getPatient]'))
   exec('CREATE PROCEDURE [dbo].[getPatient] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE getPatient
	-- Add the parameters for the stored procedure here
	@ssn nvarchar(9)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT * FROM Patient WHERE SSN = @ssn

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/28/2019
-- Description:	takes a ssn variable and returns visits where SSN matches
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[getVisits]'))
   exec('CREATE PROCEDURE [dbo].[getVisits] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE getVisits
	-- Add the parameters for the stored procedure here
	@ssn nvarchar(9)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT * FROM Visit WHERE PatientId = @ssn

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/28/2019
-- Description:	takes 3 variables and returns patients that begin with the given variables
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[queryPatient]'))
   exec('CREATE PROCEDURE [dbo].[queryPatient] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE queryPatient
	-- Add the parameters for the stored procedure here
	@ssn nvarchar(9), @lastName nvarchar(50), 
	@firstName nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	EXEC('SELECT * FROM Patient WHERE SSN LIKE ''' + @ssn + '%'' AND LastName LIKE ''' + @lastName + '%'' AND FirstName LIKE ''' + @firstName +'%'' ORDER BY LastName, FirstName, MiddleInitial')

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/28/2019
-- Description:	takes in variables and updates them to the patient table with the ssn given
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[updatePatient]'))
   exec('CREATE PROCEDURE [dbo].[updatePatient] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE updatePatient

	-- Add the parameters for the stored procedure here
	@gender nvarchar(1), @ssn nvarchar(50), 
	@birthDate datetime, @firstName nvarchar(50), 
	@middleInitial nvarchar(1), @lastName nvarchar(50), 
	@addressLine1 nvarchar(50), @addressLine2 nvarchar(50), 
	@state nvarchar(2), @city nvarchar(50), 
	@zipcode nchar(10), @insurerId nvarchar(50), 
	@doNotResuscitate bit, @organDonor bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE Patient SET 
	Gender = @gender, SSN = @ssn, 
	BirthDate = @birthDate, FirstName = @firstName,
	MiddleInitial = @middleInitial, LastName = @lastName, 
	AddressLine1 = @addressLine1,
	AddressLine2 = @addressLine2, 
	state = @state, city = @city, 
	Zipcode = @zipcode, InsurerId = @insurerId,
	DoNotResuscitate = @doNotResuscitate, OrganDonor = @organDonor 
	WHERE SSN = @ssn

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/28/2019
-- Description:	takes a ssn variable and returns visits where SSN matches
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[getItems]'))
   exec('CREATE PROCEDURE [dbo].[getItems] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE getItems
	-- Add the parameters for the stored procedure here
	@table nvarchar(20), @feildName nvarchar(20),
	@query nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	EXEC('SELECT * FROM [' + @table + '] WHERE ' + @feildName + ' = ''' + @query + '''')

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/29/2019
-- Description:	takes variables and inserts them into the Item table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addItem]'))
   exec('CREATE PROCEDURE [dbo].[addItem] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addItem

	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50), @size int,
	@quantity int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO Item(StockId, Size, Quantity) VALUES (@stockId, @size, @quantity)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/29/2019
-- Description:	takes stockId and removes the row from the table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[removeItem]'))
   exec('CREATE PROCEDURE [dbo].[removeItem] AS BEGIN SET NOCOUNT ON; END')
GO


ALTER PROCEDURE removeItem

	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DELETE FROM Item
	WHERE StockId = @stockId

END
GO


-- =============================================
-- Author:		Matt
-- Create date: 3/29/2019
-- Description:	takes variables and updates them in the Item table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[updateItem]'))
   exec('CREATE PROCEDURE [dbo].[updateItem] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE updateItem

	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50), @size int,
	@quantity int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE Item SET stockId = @stockId, Size = @size, Quantity = @quantity
	WHERE StockId = @stockId

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	verifies login
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[validateLogin]'))
   exec('CREATE PROCEDURE [dbo].[validateLogin] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE validateLogin

	-- Add the parameters for the stored procedure here
	@userName nvarchar(50), @givenPW varchar(64)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DECLARE @isValid BIT
	IF EXISTS(SELECT * FROM [User] WHERE @username = Username AND @givenPW = Password)	SET @isValid = 1
	ELSE SET @isValid = 0
	SELECT @isValid

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	takes a variables and inserts them into the Log table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addToLog]'))
   exec('CREATE PROCEDURE [dbo].[addToLog] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addToLog

	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50), @userName nvarchar(50),
	@quantityUsed [int]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [Log](StockId, UserName, Date, QuantityUsed) VALUES (@stockId, @userName, CURRENT_TIMESTAMP, @quantityUsed)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	takes a variables and inserts them into the Inventory table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addInventory]'))
   exec('CREATE PROCEDURE [dbo].[addInventory] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addInventory

	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50), @description nvarchar(300),
	@cost money
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO Inventory(StockId, Description, Cost) VALUES (@stockId, @description, @cost)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/29/2019
-- Description:	takes variables and updates them in the Inventory table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[updateInventory]'))
   exec('CREATE PROCEDURE [dbo].[updateInventory] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE updateInventory

	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50), @description nvarchar(300),
	@cost money
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE Inventory SET stockId = @StockId, Description = @description, Cost = @cost
	WHERE StockId = @stockId

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 3/29/2019
-- Description:	takes stockId and removes the row from the table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[removeInventory]'))
   exec('CREATE PROCEDURE [dbo].[removeInventory] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE removeInventory

	-- Add the parameters for the stored procedure here
	@StockId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DELETE FROM Inventory
	WHERE StockId = @StockId

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	takes variables and updates them in the Room table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[updateRoom]'))
   exec('CREATE PROCEDURE [dbo].[updateRoom] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE updateRoom
	-- Add the parameters for the stored procedure here
	@hourlyRate nvarchar(50), @dateTime datetime,
	@roomNumber nvarchar(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE Room SET HourlyRate = @hourlyRate, EffectiveDate = @dateTime, RoomNumber = @roomNumber
	WHERE RoomNumber = @roomNumber

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	takes roomNumber and removes the row from the table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[removeRoom]'))
   exec('CREATE PROCEDURE [dbo].[removeRoom] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE removeRoom

	-- Add the parameters for the stored procedure here
	@roomNumber nvarchar(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DELETE FROM Room
	WHERE RoomNumber = @roomNumber

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	takes variables and inserts them into the User table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addUser]'))
   exec('CREATE PROCEDURE [dbo].[addUser] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addUser

	-- Add the parameters for the stored procedure here
	@userName nvarchar(50), @password varchar(64),
	@userType bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [User](Username, Password, UserType) VALUES (@userName, @password, @userType)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	removes user from User table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[removeUser]'))
   exec('CREATE PROCEDURE [dbo].[removeUser] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE removeUser

	-- Add the parameters for the stored procedure here
	@userName nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DELETE FROM [User]
	WHERE Username = @userName

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	updates password of userGiven from User table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[updatePassword]'))
   exec('CREATE PROCEDURE [dbo].[updatePassword] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE updatePassword

	-- Add the parameters for the stored procedure here
	@userGiven nvarchar(50), @password varchar(64)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE [User] SET Password = @password WHERE Username = @userGiven

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	verifies login
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[validateUserType]'))
   exec('CREATE PROCEDURE [dbo].[validateUserType] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE validateUserType

	-- Add the parameters for the stored procedure here
	@UserName nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT UserType FROM [User] WHERE @username = Username

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	takes variables and inserts them into the StaysIn table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addStaysIn]'))
   exec('CREATE PROCEDURE [dbo].[addStaysIn] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addStaysIn

	-- Add the parameters for the stored procedure here
	@roomNumber nvarchar(10), @roomEffectiveDate datetime,
	@patientId nvarchar(9), @visitEntryDate datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--DECLARE @roomEffectiveDate datetime

	--SET @roomEffectiveDate = (SELECT effectiveDate FROM Room WHERE RoomNumber = @roomNumber)

	INSERT INTO StaysIn(RoomNumber, RoomEffectiveDate, PatientId, VisitEntryDate, RoomEntryDateTime) 
	VALUES (@roomNumber, @roomEffectiveDate, @patientId, @visitEntryDate, @visitEntryDate)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	takes variables and inserts them into the Symptom table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addSymptom]'))
   exec('CREATE PROCEDURE [dbo].[addSymptom] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addSymptom

	-- Add the parameters for the stored procedure here
	@patientId nvarchar(9), @entryDate datetime,
	@symptomName nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO Symptom(PatientId, EntryDate, SymptomName) VALUES (@patientId, @entryDate, @symptomName)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	removes symptom from Symptom for patient given
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[removeSymptom]'))
   exec('CREATE PROCEDURE [dbo].[removeSymptom] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE removeSymptom

	-- Add the parameters for the stored procedure here
	@patientId nvarchar(9)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DELETE FROM Symptom
	WHERE PatientId = @patientId

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	takes variables and inserts them into the Uses table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addUses]'))
   exec('CREATE PROCEDURE [dbo].[addUses] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addUses

	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50), @patientId nvarchar(9),
	@entryDateTime datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO Uses(StockId, PatientId, EntryDateTime) VALUES (@stockId, @patientId, @entryDateTime)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	takes variables and inserts them into the Visit table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addVisit]'))
   exec('CREATE PROCEDURE [dbo].[addVisit] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addVisit

	-- Add the parameters for the stored procedure here
	@patientId nvarchar(9), @entryDate datetime, 
	@attendingPhysician nvarchar(50), @diagnosis nvarchar(50)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO Visit(PatientId, EntryDate, AttendingPhysician, Diagnosis) VALUES (@patientId, @entryDate,
	@attendingPhysician, @diagnosis) 

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	updates visits based on parameters given
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[updateVisit]'))
   exec('CREATE PROCEDURE [dbo].[updateVisit] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE updateVisit

	-- Add the parameters for the stored procedure here
	@patientId nvarchar(9), @entryDate datetime,
	@attendingPhysician nvarchar(50), @diagnosis nvarchar(50)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE VISIT SET AttendingPhysician = @attendingPhysician, Diagnosis = @diagnosis WHERE PatientId = @patientId AND EntryDate = @entryDate

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	closes the staysIn by updating roomexitDate
-- RoomNumber, RoomEffectiveDate, PatientId, VisitEntryDate
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[closeStaysIn]'))
   exec('CREATE PROCEDURE [dbo].[closeStaysIn] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE closeStaysIn

	-- Add the parameters for the stored procedure here
	@PatientId nvarchar(10), @visitEntryDate datetime, 
	@roomNumber nvarchar(10), @roomEffectiveDate datetime,
	@roomExitDate datetime


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE StaysIn SET RoomExitDateTime = @roomExitDate WHERE PatientId = @PatientId AND VisitEntryDate = @visitEntryDate
			AND RoomNumber = @roomNumber AND roomEffectiveDate = @roomEffectiveDate

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/4/2019
-- Description:	closes the visit by updating exitDate
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[closeVisit]'))
   exec('CREATE PROCEDURE [dbo].[closeVisit] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE closeVisit

	-- Add the parameters for the stored procedure here
	@patientId nvarchar(9), @entryDate datetime, 
	@exitDate datetime

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE VISIT SET ExitDate = @exitDate WHERE PatientId = @patientId AND EntryDate = @entryDate

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/6/2019
-- Description:	takes variable roomNumber and returns rooms that begin with the room number given
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[queryRoom]'))
   exec('CREATE PROCEDURE [dbo].[queryRoom] AS BEGIN SET NOCOUNT ON; END')
GO


ALTER PROCEDURE queryRoom
	-- Add the parameters for the stored procedure here
	@roomNumber nvarchar(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	EXEC('SELECT * FROM Room WHERE RoomNumber LIKE ''' + @roomNumber + '%''')

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/6/2019
-- Description:	takes room and effective date variables and returns the matching Room
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[getRoom]'))
   exec('CREATE PROCEDURE [dbo].[getRoom] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE getRoom
	-- Add the parameters for the stored procedure here
	@effectiveDate datetime, @roomNumber nvarchar(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT * FROM Room WHERE EffectiveDate = @effectiveDate AND RoomNumber = @roomNumber

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/6/2019
-- Description:	takes variable and inserts them into the Service table as a new row
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addService]'))
   exec('CREATE PROCEDURE [dbo].[addService] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addService

	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO Service(StockId) VALUES (@stockId)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/6/2019
-- Description:	takes variable and updates them in the Service table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[updateService]'))
   exec('CREATE PROCEDURE [dbo].[updateService] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE updateService

	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE Service SET StockId = @stockId

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/6/2019
-- Description:	takes variable description and returns inventory that contain with the given description
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[queryInventory]'))
   exec('CREATE PROCEDURE [dbo].[queryInventory] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE queryInventory
	-- Add the parameters for the stored procedure here
	@description nvarchar(300)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	EXEC('SELECT * FROM Inventory WHERE Description LIKE ''%' + @description + '%''')

END
GO

-- =============================================
-- Author:		Justin
-- Create date: 4/30/2019
-- Description:	takes 2 variables and returns rows matching in the use table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[queryUses]'))
   exec('CREATE PROCEDURE [dbo].[queryUses] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE [dbo].[queryUses]
	-- Add the parameters for the stored procedure here
	@patientId nvarchar(9),
	@entryDateTime datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT * FROM Uses WHERE PatientId = @patientId AND EntryDateTime = @entryDateTime

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/11/2019
-- Description:	takes 3 variables and returns the uses matching them
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[getUses]'))
   exec('CREATE PROCEDURE [dbo].[getUses] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE getUses
	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50), @patientId nvarchar(9),
	@entryDateTime datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT * FROM Uses WHERE StockId = @stockId AND PatientId = @patientId AND EntryDateTime = @entryDateTime

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/11/2019
-- Description:	takes 3 variables and returns the symptoms matching them
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[getSymptom]'))
   exec('CREATE PROCEDURE [dbo].[getSymptom] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE getSymptom
	-- Add the parameters for the stored procedure here
	@patientId nvarchar(9), @entryDate datetime,
	@symptomName nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT * FROM Symptom WHERE PatientId = @patientId AND EntryDate = @entryDate AND SymptomName = @symptomName

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/11/2019
-- Description:	takes 4 variables and returns the staysIn matching them
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[getStaysIn]'))
   exec('CREATE PROCEDURE [dbo].[getStaysIn] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE getStaysIn
		-- Add the parameters for the stored procedure here
	@roomNumber nvarchar(10), @roomEffectiveDate datetime=NULL,
	@patientId nvarchar(9), @visitEntryDate datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	IF (@roomEffectiveDate is null)
		EXEC('SELECT * FROM StaysIn 
		WHERE RoomNumber LIKE ''' + @roomNumber + '%''AND PatientId LIKE ''' + @patientId + '%'' AND VisitEntryDate LIKE ''' + @visitEntryDate + '%''');
	
	ELSE
	
		EXEC('SELECT * FROM StaysIn 
		WHERE RoomNumber LIKE ''' + @roomNumber + '%'' AND RoomEffectiveDate LIKE ''' + @roomEffectiveDate 
		+ '%'' AND PatientId LIKE ''' + @patientId + '%'' AND VisitEntryDate LIKE ''' + @visitEntryDate + '%''');
	
END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/11/2019
-- Description:	takes 3 variables and returns the symptom matching them
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[querySymptoms]'))
   exec('CREATE PROCEDURE [dbo].[querySymptoms] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE querySymptoms
	-- Add the parameters for the stored procedure here
	@patientId nvarchar(9), @entryDate datetime,
	@symptomName nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	EXEC('SELECT * FROM Symptom 
	WHERE PatientId LIKE ''' + @patientId + '%'' AND EntryDate LIKE ''' + @entryDate 
	+ '%'' AND SymptomName LIKE ''' + @symptomName + '%''')

END

GO

-- =============================================
-- Author:		Matt
-- Create date: 4/11/2019
-- Description:	takes a stockId and returns 1 if the stockId is a service and 0 if otherwise
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[isService]'))
   exec('CREATE PROCEDURE [dbo].[isService] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE isService
	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DECLARE @isService BIT
	

	IF EXISTS(SELECT * FROM Service WHERE StockId = @stockId) SET @isService = 1
	ELSE SET @isService = 0
	SELECT @isService

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/11/2019
-- Description:	takes a stockId and returns 1 if the stockId is an item and 0 if otherwise
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[isItem]'))
   exec('CREATE PROCEDURE [dbo].[isItem] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE isItem
	-- Add the parameters for the stored procedure here
	@stockId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DECLARE @isService BIT
	

	IF EXISTS(SELECT * FROM Item WHERE StockId = @stockId) SET @isService = 1
	ELSE SET @isService = 0
	SELECT @isService

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/20/2019
-- Description:	takes 3 variables and stores them into the User table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[addUser]'))
   exec('CREATE PROCEDURE [dbo].[addUser] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE addUser
	-- Add the parameters for the stored procedure here
	@userName nvarchar(50), @password varchar(64),
	@userType bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [User] (Username, Password, UserType) VALUES (@userName, @password, @userType)

END
GO

-- =============================================
-- Author:		Matt
-- Create date: 4/21/2019
-- Description:	Checks if the user Exists
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[dbo].[doesUserExist]'))
   exec('CREATE PROCEDURE [dbo].[doesUserExist] AS BEGIN SET NOCOUNT ON; END')
GO

ALTER PROCEDURE doesUserExist

	-- Add the parameters for the stored procedure here
	@userName nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DECLARE @exists BIT
	IF EXISTS(SELECT * FROM [User] WHERE @username = Username)	SET @exists = 1
	ELSE SET @exists = 0
	SELECT @exists

END
GO


--Leave this line on the bottom to scope back to master afterwards.
USE [master]
